class SegmentTree
        {
            public int[] st;
            public SegmentTree(int n)
            {
                st = new int[4 * n];
            }

            public int BuildTree(int start, int end, int[] arr, int v = 0)
            {
                if (start == end)
                {
                    st[v] = arr[start];
                }

                if (start < end)
                {
                    int mid = start + (end - start) / 2;
                    st[v] = BuildTree(start, mid, arr, 2 * v + 1) + BuildTree(mid + 1, end, arr, 2 * v + 2);
                }
                return st[v];
            }

            public int getSum(int l, int r, int start, int end, int[] arr, int v = 0)
            {
                if (start > r || end < l)
                {
                    return 0;
                }
                if (l <= start && r <= end)
                {
                    return st[v];
                }
                int mid = start + (end - start) / 2;
                return getSum(l, r, start, mid, arr, 2 * v + 1) + getSum(l, r, mid + 1, end, arr, 2 * v + 2);
            }

            public void UpdateRec(int start, int end, int val, int index, int v = 0)
            {
                if (index < start || index > end)
                {
                    return;
                }
                if (start == index && end == index)
                {
                    st[v] = val;
                    return;
                }
                int mid = start + (end - start) / 2;
                if (start >= index || index <= mid)
                {
                    UpdateRec(start, mid, val, index, 2 * v + 1);
                }
                else
                {
                    UpdateRec(mid + 1, end, val, index, 2 * v + 2);
                }
                st[v] = st[2 * v + 1] + st[2 * v + 2];
            }

            public int query(int start, int end, int v, int k)
            {
                if (start == end)
                {
                    return end;
                }
                int mid = start + (end - start) / 2;
                int left = st[2 * v + 1];
                if (k > left)
                {
                    return query(mid + 1, end, 2 * v + 2, k - left);
                }
                else
                {
                    return query(start, mid, 2 * v + 1, k);
                }
            }
        }
